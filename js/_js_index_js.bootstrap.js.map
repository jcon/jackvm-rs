{"version":3,"sources":["webpack://jackvm-rs.github.io/./_js/index.js","webpack://jackvm-rs.github.io/./node_modules/jackvm-player/web.js","webpack://jackvm-rs.github.io/./node_modules/jackvm-player/web_bg.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA;AAC0D;;AAE1D;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,8CAA8C;AAC9C,uEAAuE;;AAEvE;AACA;AACA;AACA;AACA;AACA,2BAA2B,0BAA0B;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,0EAA0E,OAAO;AACjF,aAAa;;AAEb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,uBAAuB,sCAAsC;AAC7D;AACA,oDAAoD,qBAAqB,EAAE,uCAAuC;AAClH;AACA,+CAA+C,oBAAoB,SAAS,yCAAyC;AACrH;;AAEA;;AAEA;AACA,oCAAoC,qBAAqB;AACzD;AACA;;AAEA;AACA;AACA,kBAAkB,iEAAsB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,0BAA0B,oBAAoB;AAC9C;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,UAAU,MAAM,QAAQ;AAC/D;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzJsC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;;AAEtC;;AAEA,mDAAmD,+BAA+B;;AAElF;;AAEA;AACA;AACA,yEAAyE,uDAAkB;AAC3F,8CAA8C,uDAAkB;AAChE;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,yBAAyB,kBAAkB;;AAE3C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA,UAAU,cAAc;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,yEAAyE,uDAAkB;AAC3F,8CAA8C,uDAAkB;AAChE;AACA;AACA;AACA;AACA;AACO;AACP,IAAI,+CAAU;AACd;;AAEA;AACA;AACO;;AAEP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,QAAQ,sEAAiC;AACzC;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,+EAA0C;AAC5D;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA,QAAQ,+EAA0C;AAClD;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,sEAAiC;AACnD;AACA;AACA;AACA;AACA;AACO;;AAEP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,QAAQ,uEAAkC;AAC1C;AACA;AACA,cAAc,IAAI;AAClB,gBAAgB;AAChB;AACA;AACA,kBAAkB,gEAA2B;AAC7C;AACA;AACA;AACA,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA,8CAA8C,2DAAsB,EAAE,4DAAuB;AAC7F;AACA,kBAAkB,iEAA4B;AAC9C;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,mEAA8B;AACzD,YAAY,mEAA8B;AAC1C,YAAY,4EAAuC;AACnD;AACA;AACA;AACA,SAAS;AACT,YAAY,mEAA8B;AAC1C,YAAY,yDAAoB;AAChC;AACA;AACA;AACA;AACA;AACA,QAAQ,0EAAqC;AAC7C;AACA;AACA;AACA;AACA,QAAQ,iEAA4B;AACpC;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA,QAAQ,uEAAkC;AAC1C;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA,QAAQ,oEAA+B;AACvC;AACA;AACA,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA,kBAAkB,iEAA4B;AAC9C;AACA;AACA;;AAEO;AACP;AACA;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;AACA;;AAEO;AACP;AACA,sCAAsC,2DAAsB,EAAE,4DAAuB;AACrF;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA,KAAK;AACL,QAAQ,yDAAoB;AAC5B;AACA;;AAEO;AACP;AACA;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA","file":"_js_index_js.bootstrap.js","sourcesContent":["// import * as wasm from \"jackvm-player\";\nimport { JackVirtualMachine, greet } from \"jackvm-player\";\n\nconst HEIGHT = 256;\nconst WIDTH = 512;\n\nconst TICKS_PER_STEP = 24000;\n\n// const parentEl = document.getElementById('screen-container');\n// const mainCanvas = createCanvas(HEIGHT, WIDTH);\n// parentEl.appendChild(mainCanvas);\n// const progEl = document.querySelector(\"#editor\");\n\nfunction createCanvas(height, width) {\n    const mainCanvas = document.createElement('canvas');\n    mainCanvas.className = \"screen\";\n    mainCanvas.height = height;\n    mainCanvas.width = width;\n    return mainCanvas;\n}\n\nclass MemoryDebugger {\n    constructor(vm) {\n        this.vm = vm;\n        let registerCellIds = [0, 1, 2, 3, 4]; // 5, 6, 7, 8];\n        let memoryCellIds = [256, 257, 258, 259, 260, 261, 262, 24576]; // , 16384, 16416, 16448];\n\n        this.memoryCells = {};\n        this.initializedMemory = false;\n        this.allMemoryCellIds = [];\n        let tableBody = document.querySelector(\"#memory-body\");\n        if (tableBody !== undefined) {\n            for (let i = 0; i < memoryCellIds.length; i++) {\n                let tableRow = document.createElement(\"tr\");\n                let rowHead = document.createElement(\"th\");\n                rowHead.innerHTML = memoryCellIds[i].toString();\n                tableRow.appendChild(rowHead);\n                let rowCell = document.createElement(\"td\");\n                rowCell.innerHTML = \"0\";\n                tableRow.appendChild(rowCell);\n                tableBody.appendChild(tableRow);\n                let cellId = memoryCellIds[i];\n\n                this.memoryCells[cellId] = rowCell;\n            }\n            let that = this;\n            registerCellIds.forEach(cellId => {\n                that.memoryCells[cellId] = document.querySelector(`#mem-${cellId}`);\n            });\n\n            this.allMemoryCellIds = registerCellIds.concat(memoryCellIds);\n            this.initializedMemory = true;\n        }\n    }\n\n    update() {\n        if (!this.initializedMemory) {\n            return;\n        }\n        let stackPointer = this.vm.peek(0);\n        for (let i = 0; i < this.allMemoryCellIds.length - 1; i++) {\n            let cellId = this.allMemoryCellIds[i];\n            this.memoryCells[cellId].innerHTML = `${this.vm.peek(cellId)}${stackPointer === cellId ? \" < SP\" : \"\"}`;\n        }\n        this.memoryCells[24576].innerHTML = `${this.vm.peek(24575)} (key: ${String.fromCharCode(this.vm.peek(24575))})`;\n    }\n\n}\n\nclass Player {\n    constructor(parentEl, config = { debugMemory: false }) {\n        const canvas = createCanvas(HEIGHT, WIDTH);\n        parentEl.appendChild(canvas);\n\n        const screenBuffer = new ArrayBuffer(HEIGHT * WIDTH * 4);\n        this.screenBytes = new Uint8Array(screenBuffer);\n        this.vm = JackVirtualMachine.new(screenBuffer);\n        this.imageData = new ImageData(WIDTH, HEIGHT);\n        this.imageData.data.set(this.screenBytes);\n        this.isPaused = true;\n        this.isLoaded = false;\n        this.mainContext = canvas.getContext('2d')\n        if (config.debugMemory) {\n            this.memoryDebugger = new MemoryDebugger(this.vm);\n        }\n    }\n\n    drawScreen() {\n        if (!this.isPaused) {\n            requestAnimationFrame(this.drawScreen.bind(this));\n        }\n        this.vm.render_screen();\n        this.imageData.data.set(this.screenBytes);\n        this.mainContext.putImageData(this.imageData, 0, 0);\n    }\n\n    loadProgram(prog) {\n        let result = this.vm.load(prog);\n        if (!result.succeeded) {\n            console.log(\"errors ****\", result.get_errors());\n        }\n        this.isLoaded = true;\n    }\n\n    run() {\n        if (!this.isPaused) {\n            return;\n        }\n\n        this.isPaused = false;\n        // if (!this.isLoaded) {\n        //     this.loadProgram();\n        // }\n\n        this.imageData.data.set(this.screenBytes);\n        this.mainContext.putImageData(this.imageData, 0, 0);\n\n        this.executeSteps();\n        this.drawScreen();\n    }\n\n    pause() {\n        this.isPaused = true;\n    }\n\n    executeSteps() {\n        if (!this.isPaused) {\n            requestAnimationFrame(this.executeSteps.bind(this));\n        }\n        this.vm.tick_times(TICKS_PER_STEP);\n        // for (let i = 0; i < TICKS_PER_STEP; i++) {\n        //     this.vm.tick();\n        // }\n        this.memoryDebugger.update();\n    }\n\n    handleKeyDown(e) {\n        e = e || window.event;\n\n        let keyCode = e.keyCode;\n        if (keyCode == 37) {\n            keyCode = 130;\n        }\n        if (keyCode == 39) {\n            keyCode = 132;\n        }\n        // console.log(`key pressed: ${e.keyCode} => ${keyCode}`);\n        this.vm.set_key(keyCode);\n    }\n\n    handleKeyUp(e) {\n        this.vm.set_key(0);\n    }\n}\n\nexport {\n    Player as JackVmPlayer\n};","import * as wasm from \"./web_bg.wasm\";\nexport * from \"./web_bg.js\";","import * as wasm from './web_bg.wasm';\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nconst heap = new Array(32).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\n\nlet cachedTextEncoder = new lTextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n/**\n*/\nexport function greet() {\n    wasm.greet();\n}\n\n/**\n*/\nexport class CompilationResult {\n\n    static __wrap(ptr) {\n        const obj = Object.create(CompilationResult.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_compilationresult_free(ptr);\n    }\n    /**\n    * @returns {boolean}\n    */\n    get succeeded() {\n        var ret = wasm.__wbg_get_compilationresult_succeeded(this.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @param {boolean} arg0\n    */\n    set succeeded(arg0) {\n        wasm.__wbg_set_compilationresult_succeeded(this.ptr, arg0);\n    }\n    /**\n    * @returns {Array<any>}\n    */\n    get_errors() {\n        var ret = wasm.compilationresult_get_errors(this.ptr);\n        return takeObject(ret);\n    }\n}\n/**\n*/\nexport class JackVirtualMachine {\n\n    static __wrap(ptr) {\n        const obj = Object.create(JackVirtualMachine.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_jackvirtualmachine_free(ptr);\n    }\n    /**\n    * @param {any} screen\n    * @returns {JackVirtualMachine}\n    */\n    static new(screen) {\n        var ret = wasm.jackvirtualmachine_new(addHeapObject(screen));\n        return JackVirtualMachine.__wrap(ret);\n    }\n    /**\n    * @param {string} program\n    * @returns {CompilationResult}\n    */\n    load(program) {\n        var ptr0 = passStringToWasm0(program, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.jackvirtualmachine_load(this.ptr, ptr0, len0);\n        return CompilationResult.__wrap(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    get_instruction() {\n        try {\n            const retptr = wasm.__wbindgen_export_2.value - 16;\n            wasm.__wbindgen_export_2.value = retptr;\n            wasm.jackvirtualmachine_get_instruction(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_export_2.value += 16;\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    */\n    render_screen() {\n        wasm.jackvirtualmachine_render_screen(this.ptr);\n    }\n    /**\n    */\n    tick() {\n        wasm.jackvirtualmachine_tick(this.ptr);\n    }\n    /**\n    * @param {number} times\n    */\n    tick_times(times) {\n        wasm.jackvirtualmachine_tick_times(this.ptr, times);\n    }\n    /**\n    * @param {number} key\n    */\n    set_key(key) {\n        wasm.jackvirtualmachine_set_key(this.ptr, key);\n    }\n    /**\n    * @param {number} address\n    * @returns {number}\n    */\n    peek(address) {\n        var ret = wasm.jackvirtualmachine_peek(this.ptr, address);\n        return ret;\n    }\n}\n\nexport const __wbindgen_string_new = function(arg0, arg1) {\n    var ret = getStringFromWasm0(arg0, arg1);\n    return addHeapObject(ret);\n};\n\nexport const __wbindgen_object_drop_ref = function(arg0) {\n    takeObject(arg0);\n};\n\nexport const __wbg_alert_bf0052a8f800ce7f = function(arg0, arg1) {\n    alert(getStringFromWasm0(arg0, arg1));\n};\n\nexport const __wbg_new_59cb74e423758ede = function() {\n    var ret = new Error();\n    return addHeapObject(ret);\n};\n\nexport const __wbg_stack_558ba5917b466edd = function(arg0, arg1) {\n    var ret = getObject(arg1).stack;\n    var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nexport const __wbg_error_4bb6c2a97407129a = function(arg0, arg1) {\n    try {\n        console.error(getStringFromWasm0(arg0, arg1));\n    } finally {\n        wasm.__wbindgen_free(arg0, arg1);\n    }\n};\n\nexport const __wbg_newwithlength_76fae40da31b2e2c = function(arg0) {\n    var ret = new Array(arg0 >>> 0);\n    return addHeapObject(ret);\n};\n\nexport const __wbg_set_2485bb484a7ccb63 = function(arg0, arg1, arg2) {\n    getObject(arg0)[arg1 >>> 0] = takeObject(arg2);\n};\n\nexport const __wbg_newwithbyteoffsetandlength_2016b902c412c87c = function(arg0, arg1, arg2) {\n    var ret = new Uint32Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n    return addHeapObject(ret);\n};\n\nexport const __wbg_setindex_60fa756826393086 = function(arg0, arg1, arg2) {\n    getObject(arg0)[arg1 >>> 0] = arg2 >>> 0;\n};\n\nexport const __wbindgen_throw = function(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\n"],"sourceRoot":""}